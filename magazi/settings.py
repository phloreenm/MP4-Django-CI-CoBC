"""
Django settings for magazi project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os, certifi

# Import dj_database_url only if available (for Heroku compatibility)
try:
    import dj_database_url
except ImportError:
    dj_database_url = None

#For developement purposes only;  Remove the certifi import and the lone below before deploying to production
if config('ENVIRONMENT', default='development') == 'development':
    os.environ['SSL_CERT_FILE'] = certifi.where() # This line sets the SSL_CERT_FILE environment variable to the path of the certifi file. This is required to use the requests library to make HTTPS requests.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ACCOUNT_ADAPTER = 'accounts.adapter.MyAccountAdapter'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# Determine the environment from the ENVIRONMENT variable.
ENVIRONMENT = config('ENVIRONMENT', default='development')

if ENVIRONMENT == 'production':
    DEBUG = False # SECURITY WARNING: don't run with debug turned on in production!
    SECRET_KEY = os.environ.get('SECRET_KEY')
    STRIPE_PUBLIC_KEY = os.environ.get('STRIPE_PUBLIC_KEY')
    STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')
    STRIPE_WH_SECRET = os.environ.get('STRIPE_WH_SECRET')
    ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')
else:
    DEBUG = config('DEBUG', default=True, cast=bool)
    SECRET_KEY = config('SECRET_KEY', default='your-local-secret-key')
    STRIPE_PUBLIC_KEY = config('STRIPE_PUBLIC_KEY')
    STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY')
    STRIPE_WH_SECRET = config('STRIPE_WH_SECRET', default="whsec_test_secret")
    ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    # Optional -- requires install using `django-allauth[socialaccount]`.
    'allauth.socialaccount',
    # include the providers you want to enable:
    # 'allauth.socialaccount.providers.google',
    # 'allauth.socialaccount.providers.facebook',
    'home',
    'products',
    'cart',
    'checkout',
    'django_countries',
    'crispy_forms',
    'crispy_bootstrap5',
    'orders.apps.OrdersConfig',
    'profiles.apps.ProfilesConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'profiles.middleware.EnsureProfileMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'magazi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'), # This is the directory where Django will look for templates. We need to add this to the TEMPLATES setting in the settings.py file.
            os.path.join(BASE_DIR, 'templates', 'allauth'), # This is the directory where Django will look for the allauth templates. We need to add this to the TEMPLATES setting in the settings.py file.
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # allauth required
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context.cart_summary',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

# Email Backend Operations Configuration - AllAuth Account Management
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' #email backend for development
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
ACCOUNT_USERNAME_MIN_LENGTH = 4
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

WSGI_APPLICATION = 'magazi.wsgi.application'

# Gmail Backend Configuration
if config('ENVIRONMENT', default='development') == 'development':
    # For development, use console backend to avoid Gmail auth issues
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DEFAULT_FROM_EMAIL = 'noreply@magazi.com'  # Default email for development
    # Uncomment the lines below when you're ready to use Gmail:
    # EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", default=True)
else:
    # Production Gmail configuration - uncomment when ready to use Gmail
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = "smtp.gmail.com"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
    DEFAULT_FROM_EMAIL = EMAIL_HOST_USER or 'noreply@magazi.com'

# ==========================================
# GMAIL CONFIGURATION FOR PRODUCTION USE
# ==========================================
# To enable Gmail for real email sending:
#
# 1. ENABLE 2-STEP VERIFICATION on your Google account:
#    - Go to: https://myaccount.google.com/security
#    - Turn on 2-Step Verification
#
# 2. CREATE AN APP PASSWORD:
#    - Go to: https://myaccount.google.com/apppasswords
#    - Select "Mail" and your device
#    - Copy the 16-character password generated
#
# 3. SET ENVIRONMENT VARIABLES:
#    - EMAIL_HOST_USER=your-gmail-address@gmail.com
#    - EMAIL_HOST_PASSWORD=your-16-character-app-password
#    - ENVIRONMENT=production (to switch from console to SMTP)
#
# 4. TO TEST GMAIL IN DEVELOPMENT: Replace the development section above with:
#    if config('ENVIRONMENT', default='development') == 'development':
#        EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", default=True)
#        EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
#        EMAIL_HOST = "smtp.gmail.com"
#        EMAIL_PORT = 587
#        EMAIL_USE_TLS = True
#        EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
#        EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
#        DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
#
# Example .env file for Gmail:
# EMAIL_HOST_USER=yourname@gmail.com
# EMAIL_HOST_PASSWORD=abcd efgh ijkl mnop  # App password (with spaces)
# ENVIRONMENT=development  # or production
#
# ==========================================


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if ENVIRONMENT == 'production' and dj_database_url:
    # Parse database URL from Heroku DATABASE_URL
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }
else:
    # SQLite for development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration for Heroku static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Add media files to WhiteNoise for Heroku production
if ENVIRONMENT == 'production':
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_AUTOREFRESH = True

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Stripe Configuration
STRIPE_WH_SECRET = config("STRIPE_WH_SECRET", default="whsec_test_secret")
print("STRIPE_WH_SECRET =", STRIPE_WH_SECRET)
STRIPE_PUBLIC_KEY = config("STRIPE_PUBLIC_KEY")
STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY")
STRIPE_CURRENCY = "gbp"

CRISPY_TEMPLATE_PACK = 'bootstrap5'